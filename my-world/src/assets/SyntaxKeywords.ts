const keywords = [
  "break",
  "case",
  "catch",
  "continue",
  "debugger*",
  "default",
  "delete",
  "do",
  "else",
  "finally",
  "for",
  "function",
  "if",
  "in",
  "instanceof",
  "new",
  "return",
  "switch",
  "this",
  "throw",
  "try",
  "typeof",
  "var",
  "void",
  "while",
  "with",
  "abstract",
  "boolean",
  "byte",
  "char",
  "class",
  "const",
  "debugger",
  "double",
  "enum",
  "export",
  "extends",
  "final",
  "float",
  "goto",
  "implements",
  "import",
  "int",
  "interface",
  "long",
  "native",
  "package",
  "private",
  "protected public",
  "short",
  "static",
  "super",
  "synchronized",
  "throws",
  "transient",
  "volatile",
];
const builtinObject = [
  "AggragateError",
  "Array",
  "AsyncFunction",
  "Atomics",
  "BigInt",
  "BingInt64Array",
  "BigUinit64Array",
  "Boolean",
  "DataView",
  "Data",
  "Error",
  "EvalError",
  "FinalizationRegistry",
  "Float32Array",
  "Float64Array",
  "Function",
  "Generatior",
  "GeneratorFunction",
  "Infinity",
  "Int16Array",
  "Int32Array",
  "Int8Array",
  "IntermalError",
  "Intl",
  "JSON",
  "Map",
  "NaN",
  "Number",
  "Object",
  "Promise",
  "Proxy",
  "RangeError",
  "Reflect",
  "RegExp",
  "SetSharedArrayBuffer",
  "String",
  "Symbol",
  "SyntaxError",
  "TypeError",
  "TypeArray",
  "URIError",
  "Unit16Array",
  "Unit32Array",
  "Unit8Array",
  "Unit8ClampedArray",
  "WeakMap",
  "WeakRef",
  "WeakSet",
  "WebAssembly",
  "decodeURI",
  "decodeURIComponent",
  "encodeURI",
  "encodeURIComponent",
  "escape",
  "eval",
  "globalThis",
  "isFinite",
  "inNaN",
  "null",
  "parseFloat",
  "parseInt",
  "undefined",
  "unescape",
  "uneval",
];
const builtinFunc = [
  "map",
  "find",
  "findIndex",
  "filter",
  "indexOf",
  "splice",
  "slice",
  "shift",
  "pop",
  "push",
  "join",
  "reduce",
  "setTimeout",
  "clearTimeout",
  "setInterval",
  "clearInterval",
];
export const keywordsMap = new Map();
export const colorToCode = (arr: string[], color: string) => {
  arr.reduce((map, k, i) => {
    map.set(k.toUpperCase(), color);
    return map;
  }, keywordsMap);
};
colorToCode(keywords, "rgb(158 84 250)");
colorToCode(builtinObject, "rgb(255 182 46)");
colorToCode(builtinFunc, "rgb(115 131 243)");
